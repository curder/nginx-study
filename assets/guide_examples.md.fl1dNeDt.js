import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.CrCg5V4F.js";const E=JSON.parse('{"title":"一些示例","description":"","frontmatter":{},"headers":[],"relativePath":"guide/examples.md","filePath":"guide/examples.md","lastUpdated":1713152777000}'),e={name:"guide/examples.md"},p=n(`<h1 id="一些示例" tabindex="-1">一些示例 <a class="header-anchor" href="#一些示例" aria-label="Permalink to &quot;一些示例&quot;">​</a></h1><h2 id="添加或删除-www-子域名" tabindex="-1">添加或删除 <code>www</code> 子域名 <a class="header-anchor" href="#添加或删除-www-子域名" aria-label="Permalink to &quot;添加或删除 \`www\` 子域名&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-3u9C7" id="tab-k8zldzC" checked="checked"><label for="tab-k8zldzC">添加 www 子域名</label><input type="radio" name="group-3u9C7" id="tab-bzsNrQr"><label for="tab-bzsNrQr">删除 www 子域名</label></div><div class="blocks"><div class="language-nginx vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ssl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">domain.com;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $scheme://www.domain.com$request_uri;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 不推荐使用 rewrite</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rewrite</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> ^(.*)$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $scheme://www.domain.com$1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">permanent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ssl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">www.domain.com;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $scheme://domain.com$request_uri;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><h2 id="强制所有请求使用-ssl-tls" tabindex="-1">强制所有请求使用 SSL/TLS <a class="header-anchor" href="#强制所有请求使用-ssl-tls" aria-label="Permalink to &quot;强制所有请求使用 SSL/TLS&quot;">​</a></h2><p>此 server 块强制所有访问者使用安全 (SSL/TLS) 连接到站点。</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">www.domain.com;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://www.domain.com$request_uri;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 不推荐使用 rewrite 重写规则</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($scheme </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!= </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    rewrite</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> ^ https://www.mydomain.com$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uri </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">permanent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="禁止对不支持的文件扩展名的请求" tabindex="-1">禁止对不支持的文件扩展名的请求 <a class="header-anchor" href="#禁止对不支持的文件扩展名的请求" aria-label="Permalink to &quot;禁止对不支持的文件扩展名的请求&quot;">​</a></h2><p>由于各种原因，站点可能会收到以与未运行的应用程序服务器相对应的文件扩展名结尾的请求 URL，而服务器处理的文件类型的请求无法得到服务，需要被拒绝。</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> .(aspx|php|jsp|cgi)$ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 410</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>它相对于 404 响应代码的优势在于它明确指示资源永久不可用，因此客户端不会再次发送请求。</p><h2 id="禁止访问站点某些前缀" tabindex="-1">禁止访问站点某些前缀 <a class="header-anchor" href="#禁止访问站点某些前缀" aria-label="Permalink to &quot;禁止访问站点某些前缀&quot;">​</a></h2><p>在站点需要迁移的时候，站点对应的后台不想让用户对数据进行编辑，可以通过配置 Nginx 禁止访问站点的某些域名前缀。</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~*</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> /admin </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 403</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样配置的话，再访问前缀为 <code>/admin</code> 就会返回 <strong>403 Forbidden</strong>；</p><h2 id="配置自定义重新路由" tabindex="-1">配置自定义重新路由 <a class="header-anchor" href="#配置自定义重新路由" aria-label="Permalink to &quot;配置自定义重新路由&quot;">​</a></h2><p>现在通过重新配置自定义的路由，URL <code>http://mysite.com/list/123</code> 用户友好的被重写为由<code>list.html</code> 控制器处理的 URL <code>http://mysite.com/list.html?arg=123</code></p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rewrite</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> ^/list/(.*)$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /list.html?arg=$1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">last</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="修复失败图片路径" tabindex="-1">修复失败图片路径 <a class="header-anchor" href="#修复失败图片路径" aria-label="Permalink to &quot;修复失败图片路径&quot;">​</a></h2><p>在迁移项目时会出现一些图片不在原来的图片位置。比如访问URL <code>http://mysite.com/uploads/images/example.png</code> 图片<code>example.png</code> 实际所在路径是 <code>/uploads/example.png</code>，此时可以通过 <code>rewrite</code> 对路径进行重写：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rewrite</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> ^/uploads/images/(.*)$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /uploads/$1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">last</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>这样配置后，在访问 <code>http://mysite.com/uploads/images/exmaple.png</code> 也能访问 <code>/uploads/example.png</code> 文件。</p><h2 id="图片缺失时使用默认图片" tabindex="-1">图片缺失时使用默认图片 <a class="header-anchor" href="#图片缺失时使用默认图片" aria-label="Permalink to &quot;图片缺失时使用默认图片&quot;">​</a></h2><p>当一些原因导致图片无法访问，可以临时使用一张默认图片作为展示。</p><p>比如文章封面或文章内容图，<code>https://mysite.com/storage/uploads/images/xx.png</code> 或者 <code>https://mysite.com/storage/posts/cover/images/xx.png</code> 无法访问，当出现上面的图片地址无法访问时展示一张默认的图片。</p><p>可以使用 nginx 提供的 <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#try_files" target="_blank" rel="noreferrer"><code>try_files</code> 指令</a></p><p><strong>注意：默认图片必须可以访问。</strong></p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假定默认的图片存放在项目 /images/default.jpg</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~*</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> ^\\/storage\\/(uploads|posts\\/cover)\\/images.*\\.(png|gif|jpg|jpeg)$ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 正则匹配url前缀</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       root </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/var/www/codes/{PROJECT_NAME}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里编写项目根目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       try_files </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$uri /images/default.jpg; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里提供默认文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> /images/default.jpg </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    expires </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="允许部分ip访问-其它ip则301跳转" tabindex="-1">允许部分IP访问，其它IP则301跳转 <a class="header-anchor" href="#允许部分ip访问-其它ip则301跳转" aria-label="Permalink to &quot;允许部分IP访问，其它IP则301跳转&quot;">​</a></h2><p>在站点需要跳转到其它站点时，Nginx可以指定部分IP不跳转，可以通过下面的配置实现：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-ozmz1" id="tab-1eke7ZE" checked="checked"><label for="tab-1eke7ZE">单个IP</label><input type="radio" name="group-ozmz1" id="tab-wARignY"><label for="tab-wARignY">多个IP</label></div><div class="blocks"><div class="language-nginx vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当 IP 不等于 \`127.0.0.1\` 时就跳转到其它域名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($remote_addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!~ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">127.0.0.1) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://redirect_domain;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当 IP 不等于 \`127.0.0.1\` 或 \`192.168.1.1\` 时就跳转到其它域名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($remote_addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!~ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(127.0.0.1|192.168.1.1)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://redirect_domain;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><blockquote><p><code>$remote_addr</code> 指的是客户端的 IP 地址，如果上层使用了负载均衡可以尝试获取 <code>$http_x_forwarded_for</code> 的值</p></blockquote><h2 id="添加用户名和密码http验证" tabindex="-1">添加用户名和密码HTTP验证 <a class="header-anchor" href="#添加用户名和密码http验证" aria-label="Permalink to &quot;添加用户名和密码HTTP验证&quot;">​</a></h2><p>在 Nginx 设置 HTTP 认证需要使用 <a href="https://httpd.apache.org/docs/2.4/programs/htpasswd.html" target="_blank" rel="noreferrer">httpasswd</a> 来创建和生成加密的用户用于基础认证。</p><ol><li><p>下载工具</p><p>生成对应的用户名和密码信息前需要先下载 httpasswd 工具，针对不同的操作系统下载的软件包不同。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> httpd-tools</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # CentOS</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache2-utils</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Ubuntu</span></span></code></pre></div></li><li><p>创建用户名和密码 在 nginx 提供服务的网站目录下创建一个 <code>.htpasswd</code> 文件。以下命令将创建该文件并向其中添加用户和加密密码。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> htpasswd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/.htpasswd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exampleuser</span></span></code></pre></div><p>运行命令后会提示输入密码 <code>New password: Re-type new password: Adding password for user exampleuser</code>。</p><p>htpasswd 文件的结构如下：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>exampleuser:hased-passwd</span></span></code></pre></div><blockquote><p>请注意，运行 Nginx 的用户需要对生成的文件拥有可读权限。</p></blockquote></li><li><p>更新 Nginx 配置</p><p>在网站配置文件中的 <code>Server</code> 段添加下面两行：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>   auth_basic &quot;Restricted&quot;;</span></span>
<span class="line"><span>   auth_basic_user_file /etc/nginx/.htpasswd;</span></span>
<span class="line"><span>   # ...</span></span>
<span class="line"><span>}</span></span></code></pre></div></li><li><p>重载 Nginx</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reload</span></span></code></pre></div></li></ol><p>现在尝试访问网站或已保护的域路径，可以看到浏览器提示要求输入登录名和密码。</p><p>此时输入在创建 <code>.htpasswd</code> 文件时提供的用户名和密码信息，并且在入正确的凭据之前，提示不允许访问该网站。</p>`,36),t=[p];function l(h,k,d,r,o,c){return a(),i("div",null,t)}const y=s(e,[["render",l]]);export{E as __pageData,y as default};
